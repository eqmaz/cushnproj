// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package api

import (
	"github.com/gofiber/fiber/v2"
)

// UserCheckDepositAmountJSONBody defines parameters for UserCheckDepositAmount.
type UserCheckDepositAmountJSONBody struct {
	AccountId int     `json:"account_id"`
	Amount    float32 `json:"amount"`
}

// OpenRetailAccountJSONBody defines parameters for OpenRetailAccount.
type OpenRetailAccountJSONBody struct {
	FundUuids []struct {
		FundUuid *string  `json:"fund_uuid,omitempty"`
		Weight   *float32 `json:"weight,omitempty"`
	} `json:"fund_uuids"`
	ProductUuid string `json:"product_uuid"`
}

// UserCheckDepositAmountJSONRequestBody defines body for UserCheckDepositAmount for application/json ContentType.
type UserCheckDepositAmountJSONRequestBody UserCheckDepositAmountJSONBody

// OpenRetailAccountJSONRequestBody defines body for OpenRetailAccount for application/json ContentType.
type OpenRetailAccountJSONRequestBody OpenRetailAccountJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List of ISA funds
	// (GET /isa-funds)
	GetIsaFundList(c *fiber.Ctx) error
	// List user's account balances
	// (GET /user/account/balances)
	GetUserAccountBalances(c *fiber.Ctx) error
	// Check if user can invest the desired amount
	// (POST /user/account/check-deposit)
	UserCheckDepositAmount(c *fiber.Ctx) error
	// Opens a new account
	// (POST /user/account/open-retail)
	OpenRetailAccount(c *fiber.Ctx) error
	// Products available for the user
	// (GET /user/product/available)
	GetUserProductAvailable(c *fiber.Ctx) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// GetIsaFundList operation middleware
func (siw *ServerInterfaceWrapper) GetIsaFundList(c *fiber.Ctx) error {

	return siw.Handler.GetIsaFundList(c)
}

// GetUserAccountBalances operation middleware
func (siw *ServerInterfaceWrapper) GetUserAccountBalances(c *fiber.Ctx) error {

	return siw.Handler.GetUserAccountBalances(c)
}

// UserCheckDepositAmount operation middleware
func (siw *ServerInterfaceWrapper) UserCheckDepositAmount(c *fiber.Ctx) error {

	return siw.Handler.UserCheckDepositAmount(c)
}

// OpenRetailAccount operation middleware
func (siw *ServerInterfaceWrapper) OpenRetailAccount(c *fiber.Ctx) error {

	return siw.Handler.OpenRetailAccount(c)
}

// GetUserProductAvailable operation middleware
func (siw *ServerInterfaceWrapper) GetUserProductAvailable(c *fiber.Ctx) error {

	return siw.Handler.GetUserProductAvailable(c)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(m)
	}

	router.Get(options.BaseURL+"/isa-funds", wrapper.GetIsaFundList)

	router.Get(options.BaseURL+"/user/account/balances", wrapper.GetUserAccountBalances)

	router.Post(options.BaseURL+"/user/account/check-deposit", wrapper.UserCheckDepositAmount)

	router.Post(options.BaseURL+"/user/account/open-retail", wrapper.OpenRetailAccount)

	router.Get(options.BaseURL+"/user/product/available", wrapper.GetUserProductAvailable)

}
