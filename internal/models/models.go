// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package models

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"
)

type ProductType string

const (
	ProductTypeDirect   ProductType = "direct"
	ProductTypeEmployer ProductType = "employer"
)

func (e *ProductType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ProductType(s)
	case string:
		*e = ProductType(s)
	default:
		return fmt.Errorf("unsupported scan type for ProductType: %T", src)
	}
	return nil
}

type NullProductType struct {
	ProductType ProductType
	Valid       bool // Valid is true if ProductType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullProductType) Scan(value interface{}) error {
	if value == nil {
		ns.ProductType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ProductType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullProductType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ProductType), nil
}

// Simple example table for employer, AKA company or B2B entity customers
type Employer struct {
	ID   uint32
	Uuid string
	// Employer name
	Title string
}

type EmployerProduct struct {
	ID         uint32
	EmployerID uint32
	ProductID  uint32
}

type Fund struct {
	ID          uint32
	Uuid        string
	Title       string
	Description sql.NullString
}

// Product lists the available products or account types for direct and employer customers
type Product struct {
	ID   uint32
	Uuid string
	// Product name
	Title string
	// Type of product. Direct is a retail product, employer is a B2B product
	Type        ProductType
	Description sql.NullString
}

// For simplicity we assume "user" is also a "Person or individual"
type User struct {
	ID        uint32
	NameTitle string
	NameFirst string
	NameLast  string
	Email     string
}

type UserAccount struct {
	ID              uint32
	UserID          uint32
	ProductID       uint32
	TotalInvestment string
	CurrentBalance  string
}

type UserAccountFund struct {
	ID            uint32
	FundID        uint32
	UserAccountID uint32
	WeightPc      string
}

type UserAccountTransaction struct {
	ID        uint32
	AccountID uint32
	Created   time.Time
	Amount    string
}
